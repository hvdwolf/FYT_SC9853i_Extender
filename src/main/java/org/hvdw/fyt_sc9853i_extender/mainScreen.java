package org.hvdw.fyt_sc9853i_extender;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.hvdw.fyt_sc9853i_extender.controllers.StandardFileIO;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import javax.swing.event.MenuListener;

import java.awt.*;
import java.awt.event.*;
import java.awt.event.KeyEvent;
import java.util.ResourceBundle;

// My classes
import org.hvdw.fyt_sc9853i_extender.controllers.TabOther;
import org.hvdw.fyt_sc9853i_extender.controllers.TabMods;

public class mainScreen {
    private static final Logger logger = LoggerFactory.getLogger(mainScreen.class);

    private JPanel rootPanel;
    private JMenuBar menuBar;
    private JMenu myMenu;
    private JMenuItem menuItem;
    private MenuListener menuListener;
    private JTabbedPane tabbedPane1;
    private JPanel Mods;
    private JPanel Other;
    private JProgressBar progressBar;
    private JButton btnExpandHosts;
    private JButton btnRingtone;
    private JButton btnHelpExpandHostsRingtone;
    private JLabel progressText;
    private JButton btn_boot_img;
    private JButton btn_rec_img;
    private JPanel hosts_ringtone_options;
    private JButton btn_back_system;
    private JLabel lbl_ringtone_other_options_text;
    private JLabel tabModsTopLabelText;
    private JPanel mainserverpanel;
    private JPanel mainservercomboboxpanel;
    private JLabel lblmainservermod;
    private JRadioButton rbtn_original_msmods;
    private JRadioButton rbtn_extended_msmods;
    private JRadioButton rbtn_nokill_mods;
    private JComboBox comboBoxmsmodsdates;
    private JButton btnHelp_msmods;
    private JButton btnWindowApk;
    private JLabel TabOtherTopLabelText;
    private JPanel backup_restore;
    private JPanel backup_pane;
    private JLabel lbl_backup_text;
    private JPanel restore_pane;
    private JLabel lbl_restore_text;
    private JButton btn_restore_boot_image;
    private JButton btn_restore_recovery_image;
    private JButton btn_restore_all_partitions;
    private JPanel progresspanel;
    private JPanel othermodspanel;
    private JLabel lblothermods;
    private JPanel radiomodcomboboxpanel;
    private JLabel lblradiomods;
    private JComboBox comboBoxradiomods;
    private JLabel lblInfo;

    // Define the several arrays for the other methods. An interface or getter/setter methods would be more "correct java", but also
    // creates way more code which doesn't make it clearer either.
    private JRadioButton[] getmsmodRadiobuttons() {
        return new JRadioButton[]{rbtn_original_msmods, rbtn_extended_msmods, rbtn_nokill_mods};
    }

    // Initialise helper classes
    private TabOther TabOtherFunctions = new TabOther();
    private TabMods TabModsFunctions = new TabMods();

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        rootPanel.setMinimumSize(new Dimension(1024, 700));
        tabbedPane1 = new JTabbedPane();
        rootPanel.add(tabbedPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(1000, 676), new Dimension(1000, 676), null, 0, false));
        Mods = new JPanel();
        Mods.setLayout(new GridLayoutManager(5, 1, new Insets(10, 10, 10, 10), -1, 20));
        Mods.setMinimumSize(new Dimension(994, 670));
        Mods.setPreferredSize(new Dimension(994, 670));
        tabbedPane1.addTab(ResourceBundle.getBundle("Strings").getString("tabMods"), Mods);
        tabModsTopLabelText = new JLabel();
        this.$$$loadLabelText$$$(tabModsTopLabelText, ResourceBundle.getBundle("Strings").getString("tabModsTopLabelText"));
        Mods.add(tabModsTopLabelText, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(950, -1), new Dimension(950, -1), null, 0, false));
        final Spacer spacer1 = new Spacer();
        Mods.add(spacer1, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        mainserverpanel = new JPanel();
        mainserverpanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        Mods.add(mainserverpanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        mainserverpanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        lblmainservermod = new JLabel();
        this.$$$loadLabelText$$$(lblmainservermod, ResourceBundle.getBundle("Strings").getString("lblmainservermod"));
        mainserverpanel.add(lblmainservermod, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 2, false));
        final Spacer spacer2 = new Spacer();
        mainserverpanel.add(spacer2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        mainservercomboboxpanel = new JPanel();
        mainservercomboboxpanel.setLayout(new FlowLayout(FlowLayout.CENTER, 25, 5));
        mainserverpanel.add(mainservercomboboxpanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 1, false));
        rbtn_original_msmods = new JRadioButton();
        rbtn_original_msmods.setSelected(true);
        this.$$$loadButtonText$$$(rbtn_original_msmods, ResourceBundle.getBundle("Strings").getString("rbtn_original_msmods"));
        mainservercomboboxpanel.add(rbtn_original_msmods);
        rbtn_extended_msmods = new JRadioButton();
        this.$$$loadButtonText$$$(rbtn_extended_msmods, ResourceBundle.getBundle("Strings").getString("rbtn_extended_msmods"));
        mainservercomboboxpanel.add(rbtn_extended_msmods);
        rbtn_nokill_mods = new JRadioButton();
        this.$$$loadButtonText$$$(rbtn_nokill_mods, ResourceBundle.getBundle("Strings").getString("rbtn_nokill_msmods"));
        mainservercomboboxpanel.add(rbtn_nokill_mods);
        comboBoxmsmodsdates = new JComboBox();
        mainservercomboboxpanel.add(comboBoxmsmodsdates);
        btnHelp_msmods = new JButton();
        this.$$$loadButtonText$$$(btnHelp_msmods, ResourceBundle.getBundle("Strings").getString("btnHelpgeneral"));
        mainservercomboboxpanel.add(btnHelp_msmods);
        progresspanel = new JPanel();
        progresspanel.setLayout(new FlowLayout(FlowLayout.RIGHT, 25, 5));
        Mods.add(progresspanel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 1, false));
        progressText = new JLabel();
        Font progressTextFont = this.$$$getFont$$$(null, Font.BOLD, -1, progressText.getFont());
        if (progressTextFont != null) progressText.setFont(progressTextFont);
        this.$$$loadLabelText$$$(progressText, ResourceBundle.getBundle("Strings").getString("progressText"));
        progresspanel.add(progressText);
        progressBar = new JProgressBar();
        progressBar.setIndeterminate(true);
        progressBar.setPreferredSize(new Dimension(200, 15));
        progresspanel.add(progressBar);
        othermodspanel = new JPanel();
        othermodspanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        Mods.add(othermodspanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        othermodspanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        lblothermods = new JLabel();
        this.$$$loadLabelText$$$(lblothermods, ResourceBundle.getBundle("Strings").getString("lbl_othermods"));
        othermodspanel.add(lblothermods, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 2, false));
        radiomodcomboboxpanel = new JPanel();
        radiomodcomboboxpanel.setLayout(new FlowLayout(FlowLayout.CENTER, 25, 5));
        othermodspanel.add(radiomodcomboboxpanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 1, false));
        lblradiomods = new JLabel();
        this.$$$loadLabelText$$$(lblradiomods, ResourceBundle.getBundle("Strings").getString("lbl_radiomods"));
        radiomodcomboboxpanel.add(lblradiomods);
        comboBoxradiomods = new JComboBox();
        radiomodcomboboxpanel.add(comboBoxradiomods);
        Other = new JPanel();
        Other.setLayout(new GridLayoutManager(3, 3, new Insets(10, 10, 10, 10), -1, 20));
        Other.setMinimumSize(new Dimension(994, 670));
        Other.setPreferredSize(new Dimension(994, 670));
        tabbedPane1.addTab(ResourceBundle.getBundle("Strings").getString("tabOther"), Other);
        hosts_ringtone_options = new JPanel();
        hosts_ringtone_options.setLayout(new GridLayoutManager(3, 1, new Insets(5, 0, 5, 0), -1, -1));
        Other.add(hosts_ringtone_options, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        hosts_ringtone_options.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FlowLayout(FlowLayout.CENTER, 25, 5));
        hosts_ringtone_options.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 2, false));
        btnExpandHosts = new JButton();
        this.$$$loadButtonText$$$(btnExpandHosts, ResourceBundle.getBundle("Strings").getString("btn_Expand_hosts_file"));
        btnExpandHosts.setToolTipText(ResourceBundle.getBundle("Strings").getString("tooltip_expand_hosts_file"));
        panel1.add(btnExpandHosts);
        btnRingtone = new JButton();
        this.$$$loadButtonText$$$(btnRingtone, ResourceBundle.getBundle("Strings").getString("btnRingtone"));
        btnRingtone.setToolTipText(ResourceBundle.getBundle("Strings").getString("tooltip_ringtone"));
        panel1.add(btnRingtone);
        btnWindowApk = new JButton();
        this.$$$loadButtonText$$$(btnWindowApk, ResourceBundle.getBundle("Strings").getString("btnWindowapk"));
        panel1.add(btnWindowApk);
        btnHelpExpandHostsRingtone = new JButton();
        this.$$$loadButtonText$$$(btnHelpExpandHostsRingtone, ResourceBundle.getBundle("Strings").getString("btnHelpgeneral"));
        panel1.add(btnHelpExpandHostsRingtone);
        final Spacer spacer3 = new Spacer();
        hosts_ringtone_options.add(spacer3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 2, false));
        lbl_ringtone_other_options_text = new JLabel();
        this.$$$loadLabelText$$$(lbl_ringtone_other_options_text, ResourceBundle.getBundle("Strings").getString("lbl_ringtone_other_options_text"));
        hosts_ringtone_options.add(lbl_ringtone_other_options_text, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(950, -1), new Dimension(950, -1), null, 2, false));
        final Spacer spacer4 = new Spacer();
        Other.add(spacer4, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        TabOtherTopLabelText = new JLabel();
        this.$$$loadLabelText$$$(TabOtherTopLabelText, ResourceBundle.getBundle("Strings").getString("TabOtherTopLabelText"));
        Other.add(TabOtherTopLabelText, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(950, -1), new Dimension(950, -1), null, 0, false));
        backup_restore = new JPanel();
        backup_restore.setLayout(new GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, 20));
        tabbedPane1.addTab(ResourceBundle.getBundle("Strings").getString("tabBackupRestore"), backup_restore);
        backup_pane = new JPanel();
        backup_pane.setLayout(new GridLayoutManager(2, 2, new Insets(5, 0, 5, 0), -1, -1));
        backup_restore.add(backup_pane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        backup_pane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        lbl_backup_text = new JLabel();
        this.$$$loadLabelText$$$(lbl_backup_text, ResourceBundle.getBundle("Strings").getString("backup_pane_text"));
        backup_pane.add(lbl_backup_text, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(950, -1), new Dimension(950, -1), null, 2, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FlowLayout(FlowLayout.CENTER, 25, 5));
        backup_pane.add(panel2, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 2, false));
        btn_boot_img = new JButton();
        this.$$$loadButtonText$$$(btn_boot_img, ResourceBundle.getBundle("Strings").getString("btn_backup_boot_img"));
        panel2.add(btn_boot_img);
        btn_rec_img = new JButton();
        this.$$$loadButtonText$$$(btn_rec_img, ResourceBundle.getBundle("Strings").getString("btn_backup_recovery_img"));
        panel2.add(btn_rec_img);
        btn_back_system = new JButton();
        this.$$$loadButtonText$$$(btn_back_system, ResourceBundle.getBundle("Strings").getString("btn_backup_system"));
        panel2.add(btn_back_system);
        restore_pane = new JPanel();
        restore_pane.setLayout(new GridLayoutManager(2, 1, new Insets(5, 0, 5, 0), -1, -1));
        backup_restore.add(restore_pane, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        restore_pane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        lbl_restore_text = new JLabel();
        this.$$$loadLabelText$$$(lbl_restore_text, ResourceBundle.getBundle("Strings").getString("restore_pane_text"));
        restore_pane.add(lbl_restore_text, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(950, -1), new Dimension(950, -1), null, 2, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new FlowLayout(FlowLayout.CENTER, 25, 5));
        restore_pane.add(panel3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 2, false));
        btn_restore_boot_image = new JButton();
        this.$$$loadButtonText$$$(btn_restore_boot_image, ResourceBundle.getBundle("Strings").getString("btn_restore_boot_img"));
        panel3.add(btn_restore_boot_image);
        btn_restore_recovery_image = new JButton();
        this.$$$loadButtonText$$$(btn_restore_recovery_image, ResourceBundle.getBundle("Strings").getString("btn_restore_recovery_img"));
        panel3.add(btn_restore_recovery_image);
        btn_restore_all_partitions = new JButton();
        this.$$$loadButtonText$$$(btn_restore_all_partitions, ResourceBundle.getBundle("Strings").getString("btn_restore_system"));
        panel3.add(btn_restore_all_partitions);
        final Spacer spacer5 = new Spacer();
        backup_restore.add(spacer5, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(rbtn_original_msmods);
        buttonGroup.add(rbtn_extended_msmods);
        buttonGroup.add(rbtn_nokill_mods);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    private void fillComboboxes() {
        // Fill combo boxes
        // main server mods
        String dates = StandardFileIO.readTextFileAsStringFromResource("texts/msmods_dates.txt");
        String[] msmods_dates_Strings = dates.split("\\r?\\n"); // split on new lines
        comboBoxmsmodsdates.setModel(new DefaultComboBoxModel(msmods_dates_Strings));

        // radio mods
        String radiomods = StandardFileIO.readTextFileAsStringFromResource("texts/com_syu_radio.txt");
        String[] radiomods_Strings = radiomods.split("\\r?\\n"); // split on new lines
        comboBoxradiomods.setModel(new DefaultComboBoxModel(radiomods_Strings));
    }

    // region Action Listeners and radio button groups
    class MenuActionListener implements ActionListener {

        // menuListener
        public void actionPerformed(ActionEvent ev) {
            String[] dummy = null;
            logger.info("Selected: {}", ev.getActionCommand());

            switch (ev.getActionCommand()) {
                case "Exit":
                    System.exit(0);
                    break;
                case "gen_info":
                    JOptionPane.showMessageDialog(mainScreen.this.rootPanel, String.format(ProgramTexts.HTML, 450, ProgramTexts.genInfoText), ResourceBundle.getBundle("Strings").getString("menuitem_general_info"), JOptionPane.INFORMATION_MESSAGE);
                    break;
                case "translate":
                    JOptionPane.showMessageDialog(mainScreen.this.rootPanel, String.format(ProgramTexts.HTML, 450, ResourceBundle.getBundle("Strings").getString("translate")), ResourceBundle.getBundle("Strings").getString("menuitem_translate"), JOptionPane.INFORMATION_MESSAGE);
                    break;
                case "About FYT_SC9853i_Extender":
                    JOptionPane.showMessageDialog(mainScreen.this.rootPanel, String.format(ProgramTexts.HTML, 450, ProgramTexts.aboutText), ResourceBundle.getBundle("Strings").getString("menuitem_aboutFSE"), JOptionPane.INFORMATION_MESSAGE);
                    break;
                /*case "FYT_SC9853i_Extender homepage":
                    Utils.openBrowser(ProgramTexts.ProjectWebSite);
                    break; */
                case "License":
                    Utils.showLicense(mainScreen.this.rootPanel);
                    break;
                /*case "Check for new version":
                    Utils.checkForNewVersion("menu");
                    break; */
                default:
                    break;
            }

        }
    }

    private void createmyMenuBar(JFrame frame) {
        menuBar = new JMenuBar();

        // File menu
        myMenu = new JMenu(ResourceBundle.getBundle("Strings").getString("menu_file"));
        myMenu.setMnemonic(KeyEvent.VK_F);
        menuBar.add(myMenu);
/*        menuItem = new JMenuItem("Preferences");
        myMenu.setMnemonic(KeyEvent.VK_P);
        menuItem.addActionListener(new MenuActionListener());
        myMenu.add(menuItem); */
        menuItem = new JMenuItem(ResourceBundle.getBundle("Strings").getString("menuitem_exit"));
        menuItem.setMnemonic(KeyEvent.VK_X);
        menuItem.setActionCommand("Exit");
        menuItem.addActionListener(new MenuActionListener());
        myMenu.add(menuItem);


        // Help menu
        myMenu = new JMenu(ResourceBundle.getBundle("Strings").getString("menu_help"));
        myMenu.setMnemonic(KeyEvent.VK_H);
        menuBar.add(myMenu);
        menuItem = new JMenuItem(ResourceBundle.getBundle("Strings").getString("menuitem_general_info"));
        menuItem.setActionCommand("gen_info");
        menuItem.addActionListener(new MenuActionListener());
        myMenu.add(menuItem);
        menuItem = new JMenuItem(ResourceBundle.getBundle("Strings").getString("menuitem_translate"));
        menuItem.setActionCommand("translate");
        menuItem.addActionListener(new MenuActionListener());
        myMenu.add(menuItem);
        menuItem = new JMenuItem(ResourceBundle.getBundle("Strings").getString("menuitem_donate"));
        menuItem.setActionCommand("Donate");
        myMenu.add(menuItem);
        myMenu.addSeparator();
        menuItem = new JMenuItem(ResourceBundle.getBundle("Strings").getString("menuitem_license"));
        menuItem.setActionCommand("License");
        menuItem.addActionListener(new MenuActionListener());
        myMenu.add(menuItem);
/*        menuItem = new JMenuItem("Check for new version");
        menuItem.addActionListener(new MenuActionListener());
        myMenu.add(menuItem); */
        menuItem = new JMenuItem(ResourceBundle.getBundle("Strings").getString("menuitem_aboutFSE"));
        menuItem.setActionCommand("About FYT_SC9853i_Extender");
        menuItem.addActionListener(new MenuActionListener());
        myMenu.add(menuItem);

        // Finally add menubar to the frame
        frame.setJMenuBar(menuBar);
    }

    private mainScreen(JFrame frame) {

        Utils.progressStatus(progressBar, false);
        createmyMenuBar(frame);
        fillComboboxes();
        progressText.setVisible(false);
        progressBar.setVisible(false);

        //frame.setIconImage(Toolkit.getDefaultToolkit().getImage("/resources/icons/FYT_SC9853i_Extender-64x64.png"));

        //////////////////////////////////// button listeners for Other panel////////////////////////////////////
        btnExpandHosts.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                String weburl = "https://winhelp2002.mvps.org/hosts.txt";
                String succeeded = Utils.CreateStandardFlashDrive(rootPanel, "backup_boot.sh");
                if ((!"failed".equals(succeeded)) && (!"no_flashdrive".equals(succeeded))) {
                    logger.info("basic flashdrive created for hosts file");
                    //JOptionPane.showMessageDialog(rootPanel, ResourceBundle.getBundle("Strings").getString("contentCopiedText"), ResourceBundle.getBundle("Strings").getString("contentCopiedTitle"), JOptionPane.INFORMATION_MESSAGE);
                    String flashdrive = succeeded;
                    // Now we will download the file and save it to the flash drive
                    boolean hosts_file_succeeded = TabOtherFunctions.downloadHostsFile(flashdrive, weburl);
                    if (hosts_file_succeeded) {
                        logger.info("hosts file flash drive created");
                        JOptionPane.showMessageDialog(rootPanel, ResourceBundle.getBundle("Strings").getString("contentCopiedText"), ResourceBundle.getBundle("Strings").getString("contentCopiedTitle"), JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(rootPanel, ResourceBundle.getBundle("Strings").getString("copy_hosts_file_failed_text"), ResourceBundle.getBundle("Strings").getString("copy_hosts_file_failed_title"), JOptionPane.WARNING_MESSAGE);
                    }
                }

            }
        });

        btnRingtone.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                // Create a flashdrive to replace the ringtone
                String succeeded = Utils.CreateStandardFlashDrive(rootPanel, "ringtone.sh");
                if ((!"failed".equals(succeeded)) && (!"no_flashdrive".equals(succeeded))) {
                    String flashdrive = succeeded;
                    // Now ask for the ringtone
                    String ringtone = Utils.getRingtoneFile(rootPanel);
                    if (!"".equals(ringtone)) {
                        // We have a ringtone and the flashdrive location. Let's try to create our flashable content
                        boolean ringtone_succeeded = TabOtherFunctions.CopyRingtone(flashdrive, ringtone);
                        if (ringtone_succeeded) {
                            logger.info("ringtone flash drive created");
                            JOptionPane.showMessageDialog(rootPanel, ResourceBundle.getBundle("Strings").getString("contentCopiedText"), ResourceBundle.getBundle("Strings").getString("contentCopiedTitle"), JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(rootPanel, ResourceBundle.getBundle("Strings").getString("copy_ringtone_failed_text"), ResourceBundle.getBundle("Strings").getString("copy_ringtone_failed_title"), JOptionPane.WARNING_MESSAGE);
                        }
                    } else {
                        logger.debug("No ringtone selected");
                        JOptionPane.showMessageDialog(rootPanel, ResourceBundle.getBundle("Strings").getString("no_ringtone_specified"), ResourceBundle.getBundle("Strings").getString("no_ringtone"), JOptionPane.WARNING_MESSAGE);
                    }
                }
            }
        });

        btnWindowApk.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                // enable/disable window apk button
                String success_status = TabOtherFunctions.dis_enable_Window_apk(rootPanel);
                if ((!"failed".equals(success_status)) && (!"no_flashdrive".equals(success_status))) {
                    logger.info("successfully created the disable or enable window apk flashdrive");
                    JOptionPane.showMessageDialog(rootPanel, ResourceBundle.getBundle("Strings").getString("contentCopiedText"), ResourceBundle.getBundle("Strings").getString("contentCopiedTitle"), JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });

        btnHelpExpandHostsRingtone.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                // help button/method for Other tab for ringtone and the like
                //ClassLoader cl = ClassLoader.getSystemClassLoader();
                //ResourceBundle bundle = ResourceBundle.getBundle("Strings", Locale.getDefault(), cl);
                JOptionPane.showMessageDialog(rootPanel, String.format(ProgramTexts.HTML, 450, ResourceBundle.getBundle("Strings").getString("helpBtnExpandHostsRingtone"), ProgramTexts.endHTML), ResourceBundle.getBundle("Strings").getString("genHelpTopic"), JOptionPane.INFORMATION_MESSAGE);
            }
        });

        //////////////////////////////////// button listeners for Mods panel////////////////////////////////////

        btn_boot_img.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                // button/method to create flash drive for backup of boot image
                String succeeded = Utils.CreateStandardFlashDrive(rootPanel, "backup_boot.sh");
                if ((!"failed".equals(succeeded)) && (!"no_flashdrive".equals(succeeded))) {
                    logger.info("boot img backup flash drive created");
                    JOptionPane.showMessageDialog(rootPanel, ResourceBundle.getBundle("Strings").getString("contentCopiedText"), ResourceBundle.getBundle("Strings").getString("contentCopiedTitle"), JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });

        btn_rec_img.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                // button/method to create flash drive for backup of recovery image
                String succeeded = Utils.CreateStandardFlashDrive(rootPanel, "backup_recovery.sh");
                if ((!"failed".equals(succeeded)) && (!"no_flashdrive".equals(succeeded))) {
                    logger.info("recovery img backup flash drive created");
                    JOptionPane.showMessageDialog(rootPanel, ResourceBundle.getBundle("Strings").getString("contentCopiedText"), ResourceBundle.getBundle("Strings").getString("contentCopiedTitle"), JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });

        btn_back_system.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                // button/method to create flash drive for backup of all partitions
                String succeeded = Utils.CreateStandardFlashDrive(rootPanel, "system_backup.sh");
                if ((!"failed".equals(succeeded)) && (!"no_flashdrive".equals(succeeded))) {
                    logger.info("system backup flash drive created");
                    JOptionPane.showMessageDialog(rootPanel, ResourceBundle.getBundle("Strings").getString("contentCopiedText"), ResourceBundle.getBundle("Strings").getString("contentCopiedTitle"), JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });

        btnHelp_msmods.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                // help button/method for main server mods
                JOptionPane.showMessageDialog(rootPanel, String.format(ProgramTexts.HTML, 450, ResourceBundle.getBundle("Strings").getString("help_text_msmods"), ProgramTexts.endHTML), ResourceBundle.getBundle("Strings").getString("genHelpTopic"), JOptionPane.INFORMATION_MESSAGE);
            }
        });

        rbtn_original_msmods.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                // radio buttons for main server mods
            }
        });

        comboBoxmsmodsdates.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                // Combobox holding the dates of the main server mods

                TabModsFunctions.which_com_syu_ms(rootPanel, progressBar, progressText, comboBoxmsmodsdates, getmsmodRadiobuttons());
                // Everything dealt with in which_com_syu_ms including end actions/errors/dialogs
            }
        });

        comboBoxradiomods.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                // Combobox holding the radio mods

                TabModsFunctions.which_com_syu_radio(rootPanel, progressBar, progressText, comboBoxradiomods);
                // Everything dealt with in which_com_syu_radio including end actions/errors/dialogs

            }
        });
        //////////////////////////////////// end of button listeners ////////////////////////////////////
    }

    static void createAndShowGUI() {
        JFrame frame = new JFrame("FYT_SC9853i_Extender V" + ProgramTexts.Version + "   ");
        frame.setContentPane(new mainScreen(frame).rootPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setMinimumSize(new Dimension(1024, 733));
        /*frame.setIconImage(
                new ImageIcon(getClass().getClassLoader().getResource("resources/FYT_SC9853i_Extender.ico"))
        );*/
        try {
            // Significantly improves the look of the output in
            // terms of the folder/file icons and file names returned by FileSystemView!
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception weTried) {
            logger.error("Could not start GUI.", weTried);
        }

        frame.pack();
        //frame.setLocationRelativeTo(null);
        frame.setLocationByPlatform(true);
        frame.setVisible(true);
    }

}
